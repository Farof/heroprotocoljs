/*
# Copyright (c) 2015 Blizzard Entertainment
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
*/
"use strict";

exports.version = ${version};
${patch}
const decoders = require('./decoders');
const BitPackedDecoder = decoders.BitPackedDecoder;
const VersionDecoder = decoders.VersionDecoder;


// Decoding instructions for each protocol type.
const typeinfos = [
${typeinfos}
];

// Map from protocol NNet.Game.*Event eventid to [typeid, name]
const game_event_types = {
${gameeventsTypes}
};

// The typeid of the NNet.Game.EEventId enum.
const game_eventid_typeid = ${gameeventsTypeid};

// Map from protocol NNet.Game.*Message eventid to [typeid, name]
const message_event_types = {
${messageeventsTypes}
};

// The typeid of the NNet.Game.EMessageId enum.
const message_eventid_typeid = ${messageeventsTypeid};

// Map from protocol NNet.Replay.Tracker.*Event eventid to [typeid, name]
const tracker_event_types = {
${trackereventstypes}
};

// The typeid of the NNet.Replay.Tracker.EEventId enum.
const tracker_eventid_typeid = ${trackereventsTypeid};

// The typeid of NNet.SVarUint32 (the type used to encode gameloop deltas).
const svaruint32_typeid = 7;

// The typeid of NNet.Replay.SGameUserId (the type used to encode player ids).
const replay_userid_typeid = 8;

// The typeid of NNet.Replay.SHeader (the type used to store replay game version and length).
const replay_header_typeid = ${headerTypeid};

// The typeid of NNet.Game.SDetails (the type used to store overall replay details).
const game_details_typeid = ${detailsTypeid};

// The typeid of NNet.Replay.SInitData (the type used to store the inital lobby).
const replay_initdata_typeid = ${initdataTypeid};

// not sure if correct port
function _varuint32Value(value) {
  // Returns the numeric value from a SVarUint32 instance.
  return value[Object.keys(value)[0]];
}

function* _decode_event_stream(decoder, eventidTypeid, eventTypes, decodeUserId) {
  // Decodes events prefixed with a gameloop and possibly userid
  var gameloop = 0;
  while (!decoder.done()) {
    var startBits = decoder.usedBits();

    // decode the gameloop delta before each event
    var delta = _varuint32Value(decoder.instance(svaruint32_typeid));
    gameloop += delta;

    // decode the userid before each event
    var userid = (decodeUserId === true) ? decoder.instance(replay_userid_typeid) : undefined;

    // decode the event id
    var eventid = decoder.instance(eventidTypeid);
    var eventType = eventTypes[eventid] || [null, null];
    var typeid = eventType[0];
    var typename = eventType[1];
    if (typeid === null) throw new decoders.CorruptedError('eventid(' + eventid + ') at ' + decoder.toString());

    // decode the event struct instance
    var event = decoder.instance(typeid);
    event._event = typename;
    event._eventid = eventid;

    // insert gameloop and userid
    event._gameloop = gameloop;
    if (decodeUserId) event._userid = userid;

    // the next event is byte aligned
    decoder.byteAlign();

    // insert bits used in stream
    event._bits = decoder.usedBits() - startBits;

    yield event;
  }
}

exports.decodeReplayGameEvents = function* (contents) {
  // Decodes and yields each game event from the contents byte string.
  const decoder = new BitPackedDecoder(contents, typeinfos);
  for (let event of _decode_event_stream(decoder, game_eventid_typeid, game_event_types, true))
    yield event;
};

exports.decodeReplayMessageEvents = function* (contents) {
  // Decodes and yields each message event from the contents byte string.
  const decoder = new BitPackedDecoder(contents, typeinfos);
  for (let event of _decode_event_stream(decoder, message_eventid_typeid, message_event_types, true))
    yield event;
};

exports.decodeReplayTrackerEvents = function* (contents) {
  // Decodes and yields each tracker event from the contents byte string.
  const decoder = new VersionDecoder(contents, typeinfos);
  for (let event of _decode_event_stream(decoder, tracker_eventid_typeid, tracker_event_types, false))
    yield event;
};

exports.decodeReplayHeader = function(contents) {
  // Decodes and return the replay header from the contents byte string.
  const decoder = new VersionDecoder(contents, typeinfos);
  return decoder.instance(replay_header_typeid);
};

exports.decodeReplayDetails = function(contents) {
  // Decodes and returns the game details from the contents byte string.
  const decoder = new VersionDecoder(contents, typeinfos);
  return decoder.instance(game_details_typeid);
};

exports.decodeReplayInitdata = function(contents) {
  // Decodes and return the replay init data from the contents byte string.
  const decoder = new BitPackedDecoder(contents, typeinfos);
  return decoder.instance(replay_initdata_typeid);
};

exports.decodeReplayAttributesEvents = function (contents) {
  // Decodes and yields each attribute from the contents byte string.
  const buffer = new decoders.BitPackedBuffer(contents, 'little');
  const attributes = {};

  if (!buffer.done()) {
    attributes.source = buffer.readBits(8);
    attributes.mapNameSpace = buffer.readBits(32);
    var count = buffer.readBits(32);
    attributes.scopes = {};

    while (!buffer.done()) {
      var value = {};
      value.namespace = buffer.readBits(32);
      var attrid = value.attrid = buffer.readBits(32);
      var scope = buffer.readBits(8);
      value.value = buffer.readAlignedBytes(4).reverse();
      while (value.value[0] === 0) value.value = value.value.slice(1);
      while (value.value[value.value.length - 1] === 0) value.value = value.value.slice(0, -1);
      if (!attributes.scopes[scope])
        attributes.scopes[scope] = {};
      if (!attributes.scopes[scope][attrid])
        attributes.scopes[scope][attrid] = [];
      attributes.scopes[scope][attrid].push(value);
    }
  }

  return attributes;
};

exports.unitTag = function(unitTagIndex, unitTagRecycle) {
  return (unitTagIndex << 18) + unitTagRecycle;
};

exports.unitTagIndex = function(unitTag) {
  return (unitTag >> 18) & 0x00003FFF;
};

exports.unitTagRecycle = function(unitTag) {
  return unitTag & 0x0003FFFF;
};
